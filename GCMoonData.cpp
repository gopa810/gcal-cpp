#include "stdafx.h"
#include "GCMoonData.h"
#include "gmath.h"

MOONDATA::MOONDATA(void)
{
}


MOONDATA::~MOONDATA(void)
{
}

void MOONDATA::Calculate(double jdate, EARTHDATA earth)
{
	const int arg_lr[60][4] = {
		 { 0, 0, 1, 0},
		 { 2, 0,-1, 0},
		 { 2, 0, 0, 0},
		 { 0, 0, 2, 0},
		 { 0, 1, 0, 0},
		 { 0, 0, 0, 2},
		 { 2, 0,-2, 0},
		 { 2,-1,-1, 0},
		 { 2, 0, 1, 0},
		 { 2,-1, 0, 0},
		 { 0, 1,-1, 0},
		 { 1, 0, 0, 0},
		 { 0, 1, 1, 0},
		 { 2, 0, 0,-2},
		 { 0, 0, 1, 2},
		 { 0, 0, 1,-2},
		 { 4, 0,-1, 0},
		 { 0, 0, 3, 0},
		 { 4, 0,-2, 0},
		 { 2, 1,-1, 0},
		 { 2, 1, 0, 0},
		 { 1, 0,-1, 0},
		 { 1, 1, 0, 0},
		 { 2,-1, 1, 0},
		 { 2, 0, 2, 0},
		 { 4, 0, 0, 0},
		 { 2, 0,-3, 0},
		 { 0, 1,-2, 0},
		 { 2, 0,-1, 2},
		 { 2,-1,-2, 0},
		 { 1, 0, 1, 0},
		 { 2,-2, 0, 0},
		 { 0, 1, 2, 0},
		 { 0, 2, 0, 0},
		 { 2,-2,-1, 0},
		 { 2, 0, 1,-2},
		 { 2, 0, 0, 2},
		 { 4,-1,-1, 0},
		 { 0, 0, 2, 2},
		 { 3, 0,-1, 0},
		 { 2, 1, 1, 0},
		 { 4,-1,-2, 0},
		 { 0, 2,-1, 0},
		 { 2, 2,-1, 0},
		 { 2, 1,-2, 0},
		 { 2,-1, 0,-2},
		 { 4, 0, 1, 0},
		 { 0, 0, 4, 0},
		 { 4,-1, 0, 0},
		 { 1, 0,-2, 0},
		 { 2, 1, 0,-2},
		 { 0, 0, 2,-2},
		 { 1, 1, 1, 0},
		 { 3, 0,-2, 0},
		 { 4, 0,-3, 0},
		 { 2,-1, 2, 0},
		 { 0, 2, 1, 0},
		 { 1, 1,-1, 0},
		 { 2, 0, 3, 0},
		 { 2, 0,-1,-2}
	   };

	  const int arg_b[60][4] = {
		 { 0, 0, 0, 1},
		 { 0, 0, 1, 1},
		 { 0, 0, 1,-1},
		 { 2, 0, 0,-1},
		 { 2, 0,-1, 1},
		 { 2, 0,-1,-1},
		 { 2, 0, 0, 1},
		 { 0, 0, 2, 1},
		 { 2, 0, 1,-1},
		 { 0, 0, 2,-1}, // {* !!! Error in German Meeus *}
		 { 2,-1, 0,-1},
		 { 2, 0,-2,-1},
		 { 2, 0, 1, 1},
		 { 2, 1, 0,-1},
		 { 2,-1,-1, 1},
		 { 2,-1, 0, 1},
		 { 2,-1,-1,-1},
		 { 0, 1,-1,-1},
		 { 4, 0,-1,-1},
		 { 0, 1, 0, 1},
		 { 0, 0, 0, 3},
		 { 0, 1,-1, 1},
		 { 1, 0, 0, 1},
		 { 0, 1, 1, 1},
		 { 0, 1, 1,-1},
		 { 0, 1, 0,-1},
		 { 1, 0, 0,-1},
		 { 0, 0, 3, 1},
		 { 4, 0, 0,-1},
		 { 4, 0,-1, 1},
		 { 0, 0, 1,-3},
		 { 4, 0,-2, 1},
		 { 2, 0, 0,-3},
		 { 2, 0, 2,-1},
		 { 2,-1, 1,-1},
		 { 2, 0,-2, 1},
		 { 0, 0, 3,-1},
		 { 2, 0, 2, 1},
		 { 2, 0,-3,-1},
		 { 2, 1,-1, 1},
		 { 2, 1, 0, 1},
		 { 4, 0, 0, 1},
		 { 2,-1, 1, 1},
		 { 2,-2, 0,-1},
		 { 0, 0, 1, 3},
		 { 2, 1, 1,-1},
		 { 1, 1, 0,-1},
		 { 1, 1, 0, 1},
		 { 0, 1,-2,-1},
		 { 2, 1,-1,-1},
		 { 1, 0, 1, 1},
		 { 2,-1,-2,-1},
		 { 0, 1, 2, 1},
		 { 4, 0,-2,-1},
		 { 4,-1,-1,-1},
		 { 1, 0, 1,-1},
		 { 4, 0, 1,-1},
		 { 1, 0,-1,-1},
		 { 4,-1, 0,-1},
		 { 2,-2, 0, 1}
		};
	  const int sigma_r[60] = {
	   -20905355,
		-3699111,
		-2955968,
		 -569925,
		   48888,
		   -3149,
		  246158,
		 -152138,
		 -170733,
		 -204586,
		 -129620,
		  108743,
		  104755,
		   10321,
			   0,
		   79661,
		  -34782,
		  -23210,
		  -21636,
		   24208,
		   30824,
		   -8379,
		  -16675,
		  -12831,
		  -10445,
		  -11650,
		   14403,
		   -7003,
			   0,
		   10056,
			6322,
		   -9884,
			5751,
			   0,
		   -4950,
			4130,
			   0,
		   -3958,
			   0,
			3258,
			2616,
		   -1897,
		   -2117,
			2354,
			   0,
			   0,
		   -1423,
		   -1117,
		   -1571,
		   -1739,
			   0,
		   -4421,
			   0,
			   0,
			   0,
			   0,
			1165,
			   0,
			   0,
			8752
				  };
	  const int sigma_l[60] = {
		6288774,
		1274027,
		 658314,
		 213618,
		-185116,
		-114332,
		  58793,
		  57066,
		  53322,
		  45758,
		 -40923,
		 -34720,
		 -30383,
		  15327,
		 -12528,
		  10980,
		  10675,
		  10034,
		   8548,
		  -7888,
		  -6766,
		  -5163,
		   4987,
		   4036,
		   3994,
		   3861,
		   3665,
		  -2689,
		  -2602,
		   2390,
		  -2348,
		   2236,
		  -2120,
		  -2069,
		   2048,
		  -1773,
		  -1595,
		   1215,
		  -1110,
		   -892,
		   -810,
			759,
		   -713,
		   -700,
			691,
			596,
			549,
			537,
			520,
		   -487,
		   -399,
		   -381,
			351,
		   -340,
			330,
			327,
		   -323,
			299,
			294,
			  0
		};
	  const int sigma_b[60] = {
		5128122,
		 280602,
		 277693,
		 173237,
		  55413,
		  46271,
		  32573,
		  17198,
		   9266,
		   8822,
		   8216,
		   4324,
		   4200,
		  -3359,
		   2463,
		   2211,
		   2065,
		  -1870,
		   1828,
		  -1794,
		  -1749,
		  -1565,
		  -1491,
		  -1475,
		  -1410,
		  -1344,
		  -1335,
		   1107,
		   1021,
			833,
			777,
			671,
			607,
			596,
			491,
		   -451,
			439,
			422,
			421,
		   -366,
		   -351,
			331,
			315,
			302,
		   -283,
		   -229,
			223,
			223,
		   -220,
		   -220,
		   -185,
			181,
		   -177,
			176,
			166,
		   -164,
			132,
		   -119,
			115,
			107
		};

	double t,d,m,ms,f,e,ls;// : extended;
	double sr,sl,sb,temp;// : extended;
	double a1,a2,a3; // : extended;
	double lambda,beta,delta; //: extended;
	int i; //: integer;


	t = (jdate - 2451545.0)/36525.0;

	//(* mean elongation of the moon  
	d = 297.8502042+(445267.1115168+(-0.0016300+(1.0/545868-1.0/113065000*t)*t)*t)*t;

	//(* mean anomaly of the sun  
	m =357.5291092+(35999.0502909+(-0.0001536+1.0/24490000*t)*t)*t;

	//(* mean anomaly of the moon  
	ms =134.9634114+(477198.8676313+(0.0089970+(1.0/69699-1.0/1471200*t)*t)*t)*t;

	//(* argument of the longitude of the moon  
	f =93.2720993+(483202.0175273+(-0.0034029+(-1.0/3526000+1.0/863310000*t)*t)*t)*t;

	//(* correction term due to excentricity of the earth orbit  
	e = 1.0+(-0.002516-0.0000074*t)*t;

	//(* mean longitude of the moon  
	ls =218.3164591+(481267.88134236+(-0.0013268+(1.0/538841-1.0/65194000*t)*t)*t)*t;

	//(* arguments of correction terms  
	a1 =119.75+131.849*t;
	a2 =53.09+479264.290*t;
	a3 =313.45+481266.484*t;

	sr =0;
	for(i = 0; i < 60; i++)
	{
		temp =sigma_r[i]*cos_d( arg_lr[i][0]*d
							   +arg_lr[i][1]*m
							   +arg_lr[i][2]*ms
							   +arg_lr[i][3]*f);
		if (abs(arg_lr[i][1])==1) temp =temp*e;
		if (abs(arg_lr[i][1])==2) temp =temp*e*e;
		sr =sr+temp;
	}

	sl =0;
	for(i =0; i < 60; i++)
	{
		temp =sigma_l[i]*sin_d( arg_lr[i][0]*d
							   +arg_lr[i][1]*m
							   +arg_lr[i][2]*ms
							   +arg_lr[i][3]*f);
		if (abs(arg_lr[i][1])==1) temp =temp*e;
		if (abs(arg_lr[i][1])==2) temp =temp*e*e;
		sl =sl+temp;
	}

	//(* correction terms  
	sl =sl +3958*sin_d(a1)
		+1962*sin_d(ls-f)
		+318*sin_d(a2);
	sb =0;
	for(i=0; i < 60; i++)
	{
		temp = sigma_b[i]*sin_d( arg_b[i][0]*d
							   +arg_b[i][1]*m
							   +arg_b[i][2]*ms
							   +arg_b[i][3]*f);
		if (abs(arg_b[i][1])==1) temp=temp*e;
		if (abs(arg_b[i][1])==2) temp=temp*e*e;
		sb=sb+temp;
	}

	//(* correction terms  
	sb =sb -2235*sin_d(ls)
		  +382*sin_d(a3)
		  +175*sin_d(a1-f)
		  +175*sin_d(a1+f)
		  +127*sin_d(ls-ms)
		  -115*sin_d(ls+ms);

	lambda=ls+sl/1000000;
	beta=sb/1000000;
	delta=385000.56+sr/1000;

	this->radius = delta;
	this->longitude_deg =lambda;
	this->latitude_deg = beta;

	EARTHDATA::calc_geocentric(this->longitude_deg, this->latitude_deg, this->rektaszension, this->declination, jdate);

}

